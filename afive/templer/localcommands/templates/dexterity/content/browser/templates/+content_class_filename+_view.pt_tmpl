<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="${package_dotted_name}">
<body>

<tal:comment tal:condition="nothing">
    This is a sample view template. It will not be used for rendering the
    content unless activated by creation of a view class with a matching name.
    
    Note that we're using Plone 4 macros. Replace them with Plone 3 macros
    if needed.
</tal:comment>

<metal:main fill-slot="content-core">
  <metal:content-core define-macro="content-core">

    <tal:block repeat="widget view/widgets/values">
        <div class="field" tal:condition="python:widget.__name__ not in ('IDublinCore.title', 'IDublinCore.description', 'title', 'description',)">
            <label tal:content="widget/label" />
            <br />
            <div tal:content="structure widget/render" />
        </div>
    </tal:block>

    <fieldset tal:repeat="group view/groups"
              tal:attributes="id python:''.join((group.prefix, 'groups.', group.__name__)).replace('.', '-')">
        <legend tal:content="group/label" />
        <div class="field" tal:repeat="widget group/widgets/values">
            <label tal:content="widget/label" />
            <br />
            <div tal:content="structure widget/render" />
        </div>
    </fieldset>

#if str($folderish) == 'True'
    <fieldset id="folder-listing">
        <legend>Contents</legend>
        <ul tal:define="
          Batch python:modules['Products.CMFPlone'].Batch;
          b_size python:int(request.get('b_size', 20));
          b_start python:int(request.get('b_start', 0));
          results python:context.restrictedTraverse('@@folderListing')(batch=True, b_size=b_size, b_start=b_start);
          batch python:Batch(results, b_size, b_start);">
          <li tal:repeat="item results">
            <tal:block tal:define="
                item_path python:item.getPath();
                item_title python:item.title;">
              <a tal:attributes="href item_path" tal:content="item_title"/>
            </tal:block>
          </li>
          <div metal:use-macro="context/batch_macros/macros/navigation" />
        </ul>
        <!-- note that in later version of p.app.contentlisting, view is called @@contentlisting -->
    </fieldset>
#end if

  </metal:content-core>
</metal:main>

</body>
</html>
